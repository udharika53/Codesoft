import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from ttkbootstrap import Style
import json

class TodoApp(tk.Tk):
    def __init__(self):
        super().__init__()

        self.title("Todo List")
        self.geometry("400x400")
        self.style = Style(theme="flatly")
        self.style.configure("Custom.TEntry", foreground="gray")

        # Create input field for adding tasks
        self.new_task_entry = ttk.Entry(self, font=("TkDefaultFont", 16), width=30, style="Custom.TEntry")
        self.new_task_entry.pack(pady=10)

        # Set placeholder for input field
        self.new_task_entry.insert(0, "Enter new task...")

        # Bind event to clear placeholder when input field is clicked
        self.new_task_entry.bind("<FocusIn>", self.clear_placeholder)
        # Bind event to restore placeholder when input field loses focus
        self.new_task_entry.bind("<FocusOut>", self.restore_placeholder)

        # Create button for adding tasks
        ttk.Button(self, text="Add", command=self.add_task).pack(pady=5)

        # Create frame for task list and buttons
        task_frame = tk.Frame(self)
        task_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # Create listbox to display added tasks
        self.task_list = tk.Listbox(task_frame, font=("TkDefaultFont", 16), height=10, selectmode=tk.SINGLE, bg="skyblue")
        self.task_list.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # Create frame for buttons
        button_frame = tk.Frame(task_frame)
        button_frame.pack(side=tk.RIGHT, fill=tk.Y)

        # Create button for deleting tasks
        ttk.Button(button_frame, text="Delete", style="danger.TButton", command=self.delete_task).pack(pady=5, side=tk.TOP)

        # Create button for marking tasks as done
        ttk.Button(button_frame, text="Done", style="success.TButton", command=self.mark_done).pack(pady=5, side=tk.BOTTOM)

        self.load_tasks()

    def add_task(self):
        new_task = self.new_task_entry.get()
        if new_task != "Enter new task..." and new_task != "":
            self.task_list.insert(tk.END, new_task)
            self.task_list.itemconfig(tk.END, fg="orange")
            self.new_task_entry.delete(0, tk.END)
            self.save_tasks()

    def mark_done(self):
        task_index = self.task_list.curselection()
        if task_index:
            self.task_list.itemconfig(task_index, fg="green")
            self.save_tasks()

    def delete_task(self):
        task_index = self.task_list.curselection()
        if task_index:
            self.task_list.delete(task_index)
            self.save_tasks()

    def clear_placeholder(self, event):
        if self.new_task_entry.get() == "Enter new task...":
            self.new_task_entry.delete(0, tk.END)
            self.new_task_entry.configure(style="TEntry")

    def restore_placeholder(self, event):
        if self.new_task_entry.get() == "":
            self.new_task_entry.insert(0, "Enter new task...")
            self.new_task_entry.configure(style="Custom.TEntry")

    def load_tasks(self):
        try:
            with open("tasks.json", "r") as f:
                data = json.load(f)
                for task in data:
                    self.task_list.insert(tk.END, task["text"])
                    self.task_list.itemconfig(tk.END, fg=task["color"])
        except FileNotFoundError:
            pass

    def save_tasks(self):
        data = []
        for i in range(self.task_list.size()):
            text = self.task_list.get(i)
            color = self.task_list.itemcget(i, "fg")
            data.append({"text": text, "color": color})
        with open("tasks.json", "w") as f:
            json.dump(data, f)

if __name__ == '__main__':
    app = TodoApp()
    app.mainloop()
 

